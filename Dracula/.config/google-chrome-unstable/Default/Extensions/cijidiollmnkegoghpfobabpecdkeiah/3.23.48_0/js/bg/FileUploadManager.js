function FileUploadManager(){this.uploadEntitiesForEachFile={},this.uploaders=[],this.getUploadProgress=this.getUploadProgress.bind(this)}var self;FileUploadManager.prototype.addUploader=function(t){var a=this;this.uploaders.push(t),this.isSlowUpload=!1,t.onUploadingFile(function(t,o,e,s,l,i,r,d){a.uploadStartTime||(a.uploadStartTime=new Date);var n={progress:t,timeTaken:o,noOfUploadedParts:s+1,totalParts:l+1,overallBlobSize:i,overallBlobCompleted:r};a.uploadEntitiesForEachFile[e]=n,a.isSlowUpload=d})},FileUploadManager.prototype.resetUploadStats=function(t){this.uploadEntitiesForEachFile[t]&&(this.uploadEntitiesForEachFile[t].progress=0,this.uploadEntitiesForEachFile[t].noOfUploadedParts=0,this.uploadEntitiesForEachFile[t].overallBlobCompleted=0)},FileUploadManager.prototype.setStatsAsCompleted=function(t){this.uploadEntitiesForEachFile[t]&&(this.uploadEntitiesForEachFile[t].progress=100,this.uploadEntitiesForEachFile[t].noOfUploadedParts=this.uploadEntitiesForEachFile[t].totalParts,this.uploadEntitiesForEachFile[t].overallBlobCompleted=this.uploadEntitiesForEachFile[t].overallBlobSize)},FileUploadManager.prototype.getUploadProgress=function(){var t=this,a=void 0,o=void 0,e=void 0,s=void 0,l=0,i=0;for(fileName in t.uploadEntitiesForEachFile){var r=t.uploadEntitiesForEachFile[fileName],d=r.progress,n=r.timeTaken,p=n/d*100-n;if(r.overallBlobSize&&(l+=r.overallBlobSize),r.overallBlobCompleted&&(i+=r.overallBlobCompleted),void 0==o)o=d,a=p,e=r.noOfUploadedParts,s=r.totalParts;else{var u=r.noOfUploadedParts,h=r.totalParts;a<p&&(a=p),o=(d*u+o*e)/(h+s)}}return a=(l-i)/(i/((new Date-this.uploadStartTime)/1e3)),{progress:o,remainingTime:a,isSlowUpload:t.isSlowUpload}},FileUploadManager.prototype.getUploadStatus=function(){for(var t=0,a=0,o=0,e=0;e<this.uploaders.length;e++)this.uploaders[e].uploadStatus==constants.uploadStatus.UPLOADED?t++:this.uploaders[e].uploadStatus==constants.uploadStatus.FAILED?a++:this.uploaders[e].uploadStatus==constants.uploadStatus.CANCELLED&&o++;return o>0?constants.uploadStatus.CANCELLED:a>0?constants.uploadStatus.FAILED:t==this.uploaders.length?constants.uploadStatus.UPLOADED:constants.uploadStatus.UPLOADING},FileUploadManager.prototype.checkAndRetryUploads=function(){if(console.info("current upload status while retrying = "+this.getUploadStatus()),this.getUploadStatus()==constants.uploadStatus.UPLOADING||this.getUploadStatus()==constants.uploadStatus.UPLOADED)return console.info("cant retry now."),!1;var t=this;recordingConfiguration.status={webcam:"waiting",screen:"waiting"};for(var a=0;a<this.uploaders.length;a++)this.uploaders[a].uploadStatus==constants.uploadStatus.UPLOADED&&(this.setStatsAsCompleted(this.uploaders[a].userUploadKey),recordingConfiguration.status[this.uploaders[a].type]="uploaded"),this.uploaders[a].uploadStatus!=constants.uploadStatus.FAILED&&this.uploaders[a].uploadStatus!=constants.uploadStatus.CANCELLED||this.uploaders[a].cancelUpload(function(a){t.uploadStartTime=void 0,recordingConfiguration.status[a.type]="uploading",t.resetUploadStats(a.userUploadKey),CommonUtils.retryUpload(a,function(){recordingConfiguration.status[a.type]="uploaded",uploadedVideo()})},this.uploaders[a]);return!0},FileUploadManager.prototype.getUploaders=function(){return this.uploaders},FileUploadManager.prototype.checkAndCancelUploads=function(){if(console.info("current upload status while cancelling upload = "+this.getUploadStatus()),this.getUploadStatus()==constants.uploadStatus.UPLOADED)return console.info("cant cancel. already uploaded"),!1;this.uploadStartTime=void 0;for(var t=0;t<this.uploaders.length;t++)this.uploaders[t].uploadStatus==constants.uploadStatus.UPLOADING&&(this.uploaders[t].cancelUpload(function(t){},this.uploaders[t]),this.resetUploadStats())};