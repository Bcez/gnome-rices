(()=>{"use strict";function e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function t(t){for(var o=1;o<arguments.length;o++){var i=null!=arguments[o]?arguments[o]:{};o%2?e(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):e(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const o="#3f51b5";var i;!function(e){e.DOWNLOAD="download",e.GOOGLE_DRIVE="googleDrive"}(i||(i={}));const r={fillColor:"red",fontFamily:"Helvetica",drawSize:5,playbackSpeed:"normal",frameSelectorOpen:!0,premiumOptionsOpen:!1,compressGif:!1,saveBy:i.DOWNLOAD,isUploadedFilePublic:!0};var s;t(t({},{showCursor:!1,showClickIndicator:!1,enableDrawing:!1,frames:10,maxLength:12}),{},{saveAs:"gif",saveAsScreenshot:"png",downloadFilename:"chrome-capture_yyyy-mm-dd.gif",fileAccess:"editor",quality:8,cursorColor:o,cursorSize:12,clickIndicatorColor:o,clickIndicatorSize:40,drawingColor:o,drawingSize:12,recorderLogic:"normal",screenshotsTaken:0,recordingsTaken:0,editor:r,requestRatingThreshold:10,disableRequestRating:!1,skipFullscreenInfoModal:!1,maxRecordingDimensionSize:1e3,colorScheme:"light",rating:null,hasSeenMaxTimeRecordingInfo:!1,defaultBrowserAction:"popup",enableNotifications:!1}),function(e){e.INITIAL="initial",e.SUCCESS="success",e.ERROR="error",e.PENDING="pending"}(s||(s={}));const c=()=>document.body.scrollHeight>window.innerHeight?document.body:document.scrollingElement;function l(e,t){return new Promise((n=>{(t||e)&&function(e=!1){const t="scroll-behavior: initial !important;";e?(document.scrollingElement.style.cssText=document.scrollingElement.style.cssText.replace(t,""),document.body.style.cssText=document.body.style.cssText.replace(t,"")):(document.body.style.cssText=(document.body.style.cssText||"").concat(t),document.scrollingElement.style.cssText=(document.scrollingElement.style.cssText||"").concat(t)),function(e=!0){const t="cc-full-webpage-capture";if(e){const e="::-webkit-scrollbar {\n      display: none;\n    }",n=document.createElement("style");n.id=t,n.appendChild(document.createTextNode(e)),document.head.appendChild(n)}else{const e=document.getElementById(t);e&&e.parentNode.removeChild(e)}}(!e),function(e=!0){e?window.addEventListener("mousewheel",d,{passive:!1}):window.removeEventListener("mousewheel",d)}(!e)}(e),[...document.body.getElementsByTagName("*")].filter((e=>{const t=getComputedStyle(e,null).getPropertyValue("position");return"fixed"===t||"sticky"===t})).forEach((n=>{t&&0!==parseInt(getComputedStyle(n,null).getPropertyValue("bottom"))||(n.style.display=e?"":"none")})),window.requestAnimationFrame((function(){window.requestAnimationFrame(n)}))}))}function a(e){return new Promise((t=>{const n=e.toFixed(),o=window.pageYOffset.toFixed();if(n===o)return void t(!1);const i=setTimeout((()=>{t(!1),window.removeEventListener("scroll",r)}),2e4),r=function(){o!==n&&(clearTimeout(i),window.removeEventListener("scroll",r),setTimeout((()=>t(!0)),50))};window.addEventListener("scroll",r),window.scrollTo({top:e})}))}function d(e){return e.preventDefault(),e.stopPropagation(),!1}let u=0,m=0;const p=c().scrollHeight,w=e=>{e.postMessage({endCapture:!0,remainingCapture:p%window.innerHeight,devicePixelRatio:window.devicePixelRatio}),l(!0),window.chrome.runtime.sendMessage({analyticsFullWebpageScreenshot:{url:window.location.host}})},g=Math.ceil(c().scrollHeight/window.innerHeight);if(g<=1)alert("Full webpage capture is not yet supported for this website.\n\n(╯°□°）╯︵ ┻━┻"),window.chrome.runtime.sendMessage({analyticsFullWebpageCaptureNotSupported:{url:window.location.host}});else{const e=window.chrome.runtime.connect({name:"full_webpage_screenshot"});e.onMessage.addListener((function({captureNext:t}){t&&(async(e,t)=>{u!==t?(m+=window.innerHeight,await a(Math.min(m,p-window.innerHeight))?(await l(!1),u++,e.postMessage({takeScreenshot:!0})):w(e)):w(e)})(e,g)})),e.onDisconnect.addListener((function(){l(!0)})),(async e=>{u=1,m=0,await l(!1,!0),await a(0),e.postMessage({takeScreenshot:!0})})(e)}})();